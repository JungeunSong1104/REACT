{"ast":null,"code":"var _jsxFileName = \"C:\\\\REACT\\\\exercise\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react'; //useState는 hook임\nimport './styles.css';\n\n// export default function App() {\n//   //React.useState();//이게 useState 의 완전한모습임\n//   const [price, setPrice] = useState(100); //컴포넌트 함수안에 useState를 설치해줘야함\n//   const changePricehndler = () => {//함수정의\n//    setPrice(75);//const 형태로 price를 저장했기 때문에 직접 값을 넣어줄수없음 오류가남 \n//    console.log(price);//버튼 눌렸을때 프라이스 값 출력하게 콘솔로보면 그 이전데이터가 먼저 나옴\n//   }//상태를 업데이트하기위한 세터함수는 리액트한테 적절한 타이밍에 호출해달라고하는거기때문에\n//   //즉시실행되지않음\n\n//   return (\n//         <div>\n//             <p>${price}</p>\n//             <button onClick={changePricehndler}>Apply Discount</button>\n//         </div>\n//     );//price를\n//     //on\n// }\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [enteredText, setEnteredText] = useState(\"\");\n  const textChangedHandler = event => {\n    setEnteredText(event.target.value);\n  };\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      children: \"Your message\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Invalid message\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 9\n  }, this);\n};\n_s(App, \"znzL/pmtkvVt3hZyJzgC7WHc9/8=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","App","_s","enteredText","setEnteredText","textChangedHandler","event","target","value","children","fileName","_jsxFileName","lineNumber","columnNumber","type","_c","$RefreshReg$"],"sources":["C:/REACT/exercise/src/App.js"],"sourcesContent":["import React, {useState}  from 'react';//useState는 hook임\r\nimport './styles.css';\r\n\r\n// export default function App() {\r\n//   //React.useState();//이게 useState 의 완전한모습임\r\n//   const [price, setPrice] = useState(100); //컴포넌트 함수안에 useState를 설치해줘야함\r\n//   const changePricehndler = () => {//함수정의\r\n//    setPrice(75);//const 형태로 price를 저장했기 때문에 직접 값을 넣어줄수없음 오류가남 \r\n//    console.log(price);//버튼 눌렸을때 프라이스 값 출력하게 콘솔로보면 그 이전데이터가 먼저 나옴\r\n//   }//상태를 업데이트하기위한 세터함수는 리액트한테 적절한 타이밍에 호출해달라고하는거기때문에\r\n//   //즉시실행되지않음\r\n  \r\n//   return (\r\n//         <div>\r\n//             <p>${price}</p>\r\n//             <button onClick={changePricehndler}>Apply Discount</button>\r\n//         </div>\r\n//     );//price를\r\n//     //on\r\n// }\r\n\r\nconst App = () => {\r\n    const [enteredText, setEnteredText] = useState(\"\");\r\n    const textChangedHandler = (event) => {\r\n        setEnteredText(event.target.value);\r\n    };\r\n    return (\r\n        <form>\r\n            <label>Your message</label>\r\n            <input type=\"text\" />\r\n            <p>Invalid message</p>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default App;"],"mappings":";;AAAA,OAAOA,KAAK,IAAGC,QAAQ,QAAQ,OAAO,CAAC;AACvC,OAAO,cAAc;;AAErB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEA,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACd,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAMO,kBAAkB,GAAIC,KAAK,IAAK;IAClCF,cAAc,CAACE,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC;EACtC,CAAC;EACD,oBACIR,OAAA;IAAAS,QAAA,gBACIT,OAAA;MAAAS,QAAA,EAAO;IAAY;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAO,CAAC,eAC3Bb,OAAA;MAAOc,IAAI,EAAC;IAAM;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACrBb,OAAA;MAAAS,QAAA,EAAG;IAAe;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACpB,CAAC;AAEf,CAAC;AAACX,EAAA,CAZID,GAAG;AAAAc,EAAA,GAAHd,GAAG;AAcT,eAAeA,GAAG;AAAC,IAAAc,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
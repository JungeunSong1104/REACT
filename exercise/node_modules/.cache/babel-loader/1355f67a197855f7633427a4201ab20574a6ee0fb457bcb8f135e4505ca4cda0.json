{"ast":null,"code":"var _jsxFileName = \"C:\\\\REACT\\\\exercise\\\\src\\\\App.js\";\n// import React, { useState } from \"react\"; //useState는 hook임\n// import \"./styles.css\";\n// import Todo from './Todo';\n\n//1번\n// export default function App() {\n//   //React.useState();//이게 useState 의 완전한모습임\n//   const [price, setPrice] = useState(100); //컴포넌트 함수안에 useState를 설치해줘야함\n//   const changePricehndler = () => {//함수정의\n//    setPrice(75);//const 형태로 price를 저장했기 때문에 직접 값을 넣어줄수없음 오류가남\n//    console.log(price);//버튼 눌렸을때 프라이스 값 출력하게 콘솔로보면 그 이전데이터가 먼저 나옴\n//   }//상태를 업데이트하기위한 세터함수는 리액트한테 적절한 타이밍에 호출해달라고하는거기때문에\n//   //즉시실행되지않음\n\n//   return (\n//         <div>\n//             <p>${price}</p>\n//             <button onClick={changePricehndler}>Apply Discount</button>\n//         </div>\n//     );//price를\n//     //on\n// }\n\n/////////////////////////////////////////////////////////////////////////////////////////\n\n//2번\n// const App = () => {\n//     //const [enteredText, setEnteredText] = useState(\"\");\n//     //setEnteredText : enteredText 이변수의값을 변경할 함수\n//     // useState(\"\"); 에서 \"\" 가 초기값\n//     const [message, setMessage] = useState(\"Invalid\");\n//     const messageHandler = (event) => {\n//     //messageHandler : 발생햇을때의 어쩌구를 잡아채서 했을때\n//       const value = event.target.value;\n//         if(value.trim().length<3){\n//         //if(event.target.value.trim().length>=3){\n//             setMessage(\"Invalid\");\n//         }else{\n//             setMessage(\"Valid\");\n//         }\n//     };\n//     return (\n//         <form>\n//             <label>Your message</label>\n//             <input type=\"text\" onChange={messageHandler}/>\n//             <p>{message}</p>\n//         </form>\n//     );\n// };\n\n//정원코드\n// export default function App() {\n//   const [message, setMessage] = useState(\"\");\n\n//   let warningMessage = \"\";\n\n//   const messageCheckHandler = (event) => {\n//     setMessage(event.target.value);\n\n//   };\n\n//   if (message.trim().length >= 3) {\n//     warningMessage = \"Valid Message\";\n//   } else {\n//     warningMessage = \"Invalid Message\";\n//   }\n\n//   return (\n//       <form>\n//           <label>Your message</label>\n//           <input type=\"text\" onChange={messageCheckHandler} />\n//           <p>{warningMessage}</p>\n//       </form>\n//   );\n// }\n\n//유나코드\n// const App = () => {\n//     const [message, setMessage] = useState(\"\");\n//     let warn = \"invalid\";\n\n//     const messageHandler = (event) => {\n//         if(event.target.value.trim().length >= 3){\n//             setMessage(event.target.value);\n//             warn = \"valid\";\n//         }else{\n//             setMessage(\"\");\n//             warn = \"invalid\";\n//         }\n//     };\n//     return (\n//         <form>\n//             <label>Your message</label>\n//             <input type=\"text\" onChange={messageHandler}/>\n//             <p>{warn}</p>\n//         </form>\n//     );\n// };\n\n/////////////////////////////////////////////////////////////////////////////////////\n\n//3번\n// const App = () => {\n//   const [counter, setCountter] = useState(0);\n//   const countHandler = () => {\n//     setCountter((prevCounter) => prevCounter + 1);\n//     setCountter((prevCounter) => prevCounter + 1);\n//     setCountter((prevCounter) => prevCounter + 1);\n//     setCountter((prevCounter) => prevCounter + 1);\n//     setCountter((prevCounter) => prevCounter + 1);\n//     /*\n//     counter에 직접접근하면 안되고 setCount로 접근\n//     세터사용할 때 하나의 스테이트를 설정을 할 때 이전 스테이트에 기반해서 증가시킬때는\n//     원치않는 결과를 가져올수있음\n//     ex : 이전 값에 기반해서 값을 증가시키는 함수를 여러번 실행한다고 생각해보자\n//     setCount(counter + 1); setCount(counter + 1); setCount(counter + 1); setCount(counter + 1);\n//     이렇게 했을경우 4식 증가해야하는데 실행해보면 하나씩만 늘어남\n//     그래서 항상 최신 스테이트를 가져오기로 약속되어있는 prevstate를 사용하기로함\n//     prevstate 사용방법 : 세터호출할때 내부에서 함수를 만들어서 정의를 함\n//     매개변수로 전달된 애들은 무조건 이전상태가 저장이 됨\n//     setCountter((prevCounter) => prevCounter + 1);\n//     setCountter((prevCounter) => prevCounter + 1);\n//     setCountter((prevCounter) => prevCounter + 1);\n//     setCountter((prevCounter) => prevCounter + 1);\n//     setCountter((prevCounter) => prevCounter + 1); 이렇게 하면 이제 5씩 증가함\n//     */\n//   };\n\n//   return (\n//     <div>\n//       <p id=\"counter\">{counter}</p>\n//       <button onClick={countHandler}>Increment</button>\n//     </div>\n//   );\n// };\n\n/////////////////////////////////////////////////////////////////////////////////////\n\n//4번\n// import React from \"react\";\n// import \"./styles.css\";\n// import Todo from \"./Todo\";\n\n// const DUMMY_TODOS = [\"Learn React\", \"Practice React\", \"Profit!\", \"아수라방구라\"];\n\n// const App = () => {\n//   return (\n//     <ul>\n//       {DUMMY_TODOS.map((todo) => (\n//         <Todo text={todo} />\n//       ))}\n//     </ul>\n//     /*\n//     배열이니까 하나하나 따로 출력해주기 위해서 map 함수이용\n//     mpa 함수 하나하나 매개변수를 요소..?\n//     변수 안에 들어가있는 요소들이 동적으로 출력\n//     DUMMY_TODOS 에 아수라 방구라라고 추가해주면 저절로 추가가 돼서 출력이됨\n\n//     <ul>\n//       <Todo text={DUMMY_TODOS[0]} />\n//       <Todo text={DUMMY_TODOS[1]} />\n//       <Todo text={DUMMY_TODOS[2]} />\n//     </ul>\n//     맵 배우기 전에는 이런식으로 했었음 하지만 동적으로 출력하기위해서는\n//     map함수를 사용한 위 방법으로 해야함\n//     */ \n//   );\n// };\n\n//export default App;\n\n/////////////////////////////////////////////////////////////////////////////////////\n\n//5번\nimport React from 'react';\nimport \"./styles.css\";\n\n// don't change the Component name \"App\"\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"alert\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Are you sure?\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"These changes can't be reverted!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Proceed\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      children: \"Delete\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 181,\n    columnNumber: 7\n  }, this);\n}\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","App","children","id","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/REACT/exercise/src/App.js"],"sourcesContent":["// import React, { useState } from \"react\"; //useState는 hook임\r\n// import \"./styles.css\";\r\n// import Todo from './Todo';\r\n\r\n//1번\r\n// export default function App() {\r\n//   //React.useState();//이게 useState 의 완전한모습임\r\n//   const [price, setPrice] = useState(100); //컴포넌트 함수안에 useState를 설치해줘야함\r\n//   const changePricehndler = () => {//함수정의\r\n//    setPrice(75);//const 형태로 price를 저장했기 때문에 직접 값을 넣어줄수없음 오류가남\r\n//    console.log(price);//버튼 눌렸을때 프라이스 값 출력하게 콘솔로보면 그 이전데이터가 먼저 나옴\r\n//   }//상태를 업데이트하기위한 세터함수는 리액트한테 적절한 타이밍에 호출해달라고하는거기때문에\r\n//   //즉시실행되지않음\r\n\r\n//   return (\r\n//         <div>\r\n//             <p>${price}</p>\r\n//             <button onClick={changePricehndler}>Apply Discount</button>\r\n//         </div>\r\n//     );//price를\r\n//     //on\r\n// }\r\n\r\n/////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n//2번\r\n// const App = () => {\r\n//     //const [enteredText, setEnteredText] = useState(\"\");\r\n//     //setEnteredText : enteredText 이변수의값을 변경할 함수\r\n//     // useState(\"\"); 에서 \"\" 가 초기값\r\n//     const [message, setMessage] = useState(\"Invalid\");\r\n//     const messageHandler = (event) => {\r\n//     //messageHandler : 발생햇을때의 어쩌구를 잡아채서 했을때\r\n//       const value = event.target.value;\r\n//         if(value.trim().length<3){\r\n//         //if(event.target.value.trim().length>=3){\r\n//             setMessage(\"Invalid\");\r\n//         }else{\r\n//             setMessage(\"Valid\");\r\n//         }\r\n//     };\r\n//     return (\r\n//         <form>\r\n//             <label>Your message</label>\r\n//             <input type=\"text\" onChange={messageHandler}/>\r\n//             <p>{message}</p>\r\n//         </form>\r\n//     );\r\n// };\r\n\r\n//정원코드\r\n// export default function App() {\r\n//   const [message, setMessage] = useState(\"\");\r\n\r\n//   let warningMessage = \"\";\r\n\r\n//   const messageCheckHandler = (event) => {\r\n//     setMessage(event.target.value);\r\n\r\n//   };\r\n\r\n//   if (message.trim().length >= 3) {\r\n//     warningMessage = \"Valid Message\";\r\n//   } else {\r\n//     warningMessage = \"Invalid Message\";\r\n//   }\r\n\r\n//   return (\r\n//       <form>\r\n//           <label>Your message</label>\r\n//           <input type=\"text\" onChange={messageCheckHandler} />\r\n//           <p>{warningMessage}</p>\r\n//       </form>\r\n//   );\r\n// }\r\n\r\n//유나코드\r\n// const App = () => {\r\n//     const [message, setMessage] = useState(\"\");\r\n//     let warn = \"invalid\";\r\n\r\n//     const messageHandler = (event) => {\r\n//         if(event.target.value.trim().length >= 3){\r\n//             setMessage(event.target.value);\r\n//             warn = \"valid\";\r\n//         }else{\r\n//             setMessage(\"\");\r\n//             warn = \"invalid\";\r\n//         }\r\n//     };\r\n//     return (\r\n//         <form>\r\n//             <label>Your message</label>\r\n//             <input type=\"text\" onChange={messageHandler}/>\r\n//             <p>{warn}</p>\r\n//         </form>\r\n//     );\r\n// };\r\n\r\n/////////////////////////////////////////////////////////////////////////////////////\r\n\r\n//3번\r\n// const App = () => {\r\n//   const [counter, setCountter] = useState(0);\r\n//   const countHandler = () => {\r\n//     setCountter((prevCounter) => prevCounter + 1);\r\n//     setCountter((prevCounter) => prevCounter + 1);\r\n//     setCountter((prevCounter) => prevCounter + 1);\r\n//     setCountter((prevCounter) => prevCounter + 1);\r\n//     setCountter((prevCounter) => prevCounter + 1);\r\n//     /*\r\n//     counter에 직접접근하면 안되고 setCount로 접근\r\n//     세터사용할 때 하나의 스테이트를 설정을 할 때 이전 스테이트에 기반해서 증가시킬때는\r\n//     원치않는 결과를 가져올수있음\r\n//     ex : 이전 값에 기반해서 값을 증가시키는 함수를 여러번 실행한다고 생각해보자\r\n//     setCount(counter + 1); setCount(counter + 1); setCount(counter + 1); setCount(counter + 1);\r\n//     이렇게 했을경우 4식 증가해야하는데 실행해보면 하나씩만 늘어남\r\n//     그래서 항상 최신 스테이트를 가져오기로 약속되어있는 prevstate를 사용하기로함\r\n//     prevstate 사용방법 : 세터호출할때 내부에서 함수를 만들어서 정의를 함\r\n//     매개변수로 전달된 애들은 무조건 이전상태가 저장이 됨\r\n//     setCountter((prevCounter) => prevCounter + 1);\r\n//     setCountter((prevCounter) => prevCounter + 1);\r\n//     setCountter((prevCounter) => prevCounter + 1);\r\n//     setCountter((prevCounter) => prevCounter + 1);\r\n//     setCountter((prevCounter) => prevCounter + 1); 이렇게 하면 이제 5씩 증가함\r\n//     */\r\n//   };\r\n\r\n//   return (\r\n//     <div>\r\n//       <p id=\"counter\">{counter}</p>\r\n//       <button onClick={countHandler}>Increment</button>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n/////////////////////////////////////////////////////////////////////////////////////\r\n\r\n//4번\r\n// import React from \"react\";\r\n// import \"./styles.css\";\r\n// import Todo from \"./Todo\";\r\n\r\n// const DUMMY_TODOS = [\"Learn React\", \"Practice React\", \"Profit!\", \"아수라방구라\"];\r\n\r\n// const App = () => {\r\n//   return (\r\n//     <ul>\r\n//       {DUMMY_TODOS.map((todo) => (\r\n//         <Todo text={todo} />\r\n//       ))}\r\n//     </ul>\r\n//     /*\r\n//     배열이니까 하나하나 따로 출력해주기 위해서 map 함수이용\r\n//     mpa 함수 하나하나 매개변수를 요소..?\r\n//     변수 안에 들어가있는 요소들이 동적으로 출력\r\n//     DUMMY_TODOS 에 아수라 방구라라고 추가해주면 저절로 추가가 돼서 출력이됨\r\n\r\n//     <ul>\r\n//       <Todo text={DUMMY_TODOS[0]} />\r\n//       <Todo text={DUMMY_TODOS[1]} />\r\n//       <Todo text={DUMMY_TODOS[2]} />\r\n//     </ul>\r\n//     맵 배우기 전에는 이런식으로 했었음 하지만 동적으로 출력하기위해서는\r\n//     map함수를 사용한 위 방법으로 해야함\r\n//     */ \r\n//   );\r\n// };\r\n\r\n//export default App;\r\n\r\n/////////////////////////////////////////////////////////////////////////////////////\r\n\r\n//5번\r\nimport React from 'react';\r\nimport \"./styles.css\";\r\n\r\n// don't change the Component name \"App\"\r\nexport default function App() {\r\n    return (\r\n      <div>\r\n        <div id=\"alert\">\r\n          <h2>Are you sure?</h2>\r\n          <p>These changes can't be reverted!</p>\r\n          <button>Proceed</button>\r\n        </div>\r\n        <button>Delete</button>\r\n      </div>    \r\n    );\r\n}\r\n\r\n\r\n\r\n\r\n\r\n"],"mappings":";AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAO,cAAc;;AAErB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,eAAe,SAASC,GAAGA,CAAA,EAAG;EAC1B,oBACED,OAAA;IAAAE,QAAA,gBACEF,OAAA;MAAKG,EAAE,EAAC,OAAO;MAAAD,QAAA,gBACbF,OAAA;QAAAE,QAAA,EAAI;MAAa;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACtBP,OAAA;QAAAE,QAAA,EAAG;MAAgC;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,eACvCP,OAAA;QAAAE,QAAA,EAAQ;MAAO;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACrB,CAAC,eACNP,OAAA;MAAAE,QAAA,EAAQ;IAAM;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACpB,CAAC;AAEZ;AAACC,EAAA,GAXuBP,GAAG;AAAA,IAAAO,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
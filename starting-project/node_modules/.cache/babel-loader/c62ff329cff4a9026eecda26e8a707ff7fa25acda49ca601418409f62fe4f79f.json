{"ast":null,"code":"var _jsxFileName = \"C:\\\\REACT\\\\starting-project\\\\src\\\\App.js\";\nimport { createBrowserRouter, RouterProvider } from \"react-router-dom\"; //라우터 임포트\nimport HomePage from \"./pages/Home\";\nimport ProductsPage from \"./pages/Products\";\nimport RootLayout from \"./pages/Root\";\nimport ErrorPage from \"./pages/Error\";\nimport ProductDetailPage from \"./pages/ProductDetail\";\n//createBrowserRouter hook 임 생긴거보면 함수임 그럼 리턴값이 있겠지 그거 받아줄 상수값필요\n// const router = createBrowserRouter([\n//   //사용하려는 경로들을 도와주는 함수?\n//   {\n//     path: \"/\",\n//     element: (\n//         <HomePage />\n//     ),\n//   }, // / : 가장 상위디렉토리\n//   //path: '/'에 element를 연결해줌\n//   //HomePage 컴포넌트의 내용이 열리는 것\n//   {},\n// ]); //정의를 내리는것\n\n// function App() {\n//   return (\n//     <div>\n//       <RouterProvider router={router} />\n//     </div>\n//   );\n//   //RouterProvider에 createBrowserRouter의 주소(경로)를 넣어줌\n// }\n\n// const routeDefinitions = createRoutesFromElements(\n//   <Route>\n//     <Route path=\"/\" element={<HomePage />} />\n//     <Route path=\"/products\" element={<ProductsPage />} />\n//   </Route>\n// );\n// const router = createBrowserRouter(routeDefinitions);\n\n//router 객체\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst router = createBrowserRouter([{\n  path: \"/\",\n  element: /*#__PURE__*/_jsxDEV(RootLayout, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 14\n  }, this),\n  //RootLayout는 프로덕트홈페이지를 자식으로서 갖고있게됨\n  errorElement: /*#__PURE__*/_jsxDEV(ErrorPage, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 19\n  }, this),\n  children: [{\n    path: \"/\",\n    element: /*#__PURE__*/_jsxDEV(HomePage, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 18\n    }, this)\n  }, {\n    path: \"/products\",\n    element: /*#__PURE__*/_jsxDEV(ProductsPage, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 18\n    }, this)\n  }, {\n    path: \"/products/:productId\",\n    element: /*#__PURE__*/_jsxDEV(ProductDetailPage, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 48\n    }, this)\n  }\n  /*\n  라우터를 이용해서 돔을 연결해줄텐데 제품 목록페이지는 하나고 거기에 클릭해서 연결되는 제품정보알려주는 페이지는 여러개겠지\n  상세정보 페이지마다 1번제품이다 이러면 1번제품주소를 /products/product-detail\", element: <ProductOnePage />\n  이렇게 여러개 만들어줄순 없음 페이지가 수천개가될테니까 그걸 어케 하나하나다 만듦 ㅇㅋ?\n  그래서 라우터는 path: \"/products/:productId\", element: <ProductDetailPage />  :productId 이런 형태로 동적파라미터를 제공함\n  아이디를 할당한느 것처럼 중간에 :을 써주고 이름을 써준느것 productId 이부분은 변수처럼 내 맘대로 정해줄수있음\n  여기서 :는 라우터돔한테 콜론뒤에 문자는 변할수있는동적값이라는걸 알려주는것(변수같은거라고 알려주는것)\n  마치 함수의 매개변수 처럼 쓰이는것 여기서는 결국 제품 번호라는 뜻 productId=제품번호 \n  products는 경로로서 활용이 되고 products/ 뒤의 주소는 상세페이지로 연결되는 값으로 사용됨 */]\n}]);\n\nfunction App() {\n  return /*#__PURE__*/_jsxDEV(RouterProvider, {\n    router: router\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 10\n  }, this);\n}\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["createBrowserRouter","RouterProvider","HomePage","ProductsPage","RootLayout","ErrorPage","ProductDetailPage","jsxDEV","_jsxDEV","router","path","element","fileName","_jsxFileName","lineNumber","columnNumber","errorElement","children","App","_c","$RefreshReg$"],"sources":["C:/REACT/starting-project/src/App.js"],"sourcesContent":["import { createBrowserRouter, RouterProvider } from \"react-router-dom\"; //라우터 임포트\nimport HomePage from \"./pages/Home\";\nimport ProductsPage from \"./pages/Products\";\nimport RootLayout from \"./pages/Root\";\nimport ErrorPage from \"./pages/Error\";\nimport ProductDetailPage from \"./pages/ProductDetail\";\n//createBrowserRouter hook 임 생긴거보면 함수임 그럼 리턴값이 있겠지 그거 받아줄 상수값필요\n// const router = createBrowserRouter([\n//   //사용하려는 경로들을 도와주는 함수?\n//   {\n//     path: \"/\",\n//     element: (\n//         <HomePage />\n//     ),\n//   }, // / : 가장 상위디렉토리\n//   //path: '/'에 element를 연결해줌\n//   //HomePage 컴포넌트의 내용이 열리는 것\n//   {},\n// ]); //정의를 내리는것\n\n// function App() {\n//   return (\n//     <div>\n//       <RouterProvider router={router} />\n//     </div>\n//   );\n//   //RouterProvider에 createBrowserRouter의 주소(경로)를 넣어줌\n// }\n\n\n\n// const routeDefinitions = createRoutesFromElements(\n//   <Route>\n//     <Route path=\"/\" element={<HomePage />} />\n//     <Route path=\"/products\" element={<ProductsPage />} />\n//   </Route>\n// );\n// const router = createBrowserRouter(routeDefinitions);\n\n//router 객체\nconst router = createBrowserRouter([\n  {\n    path: \"/\",\n    element: <RootLayout />,//RootLayout는 프로덕트홈페이지를 자식으로서 갖고있게됨\n    errorElement: <ErrorPage />,\n    children: [\n      {\n        path: \"/\",\n        element: <HomePage />,\n      },\n      {\n        path: \"/products\",\n        element: <ProductsPage />,\n      },\n      {\n        path: \"/products/:productId\", element: <ProductDetailPage /> \n      },\n      /*\n      라우터를 이용해서 돔을 연결해줄텐데 제품 목록페이지는 하나고 거기에 클릭해서 연결되는 제품정보알려주는 페이지는 여러개겠지\n      상세정보 페이지마다 1번제품이다 이러면 1번제품주소를 /products/product-detail\", element: <ProductOnePage />\n      이렇게 여러개 만들어줄순 없음 페이지가 수천개가될테니까 그걸 어케 하나하나다 만듦 ㅇㅋ?\n      그래서 라우터는 path: \"/products/:productId\", element: <ProductDetailPage />  :productId 이런 형태로 동적파라미터를 제공함\n      아이디를 할당한느 것처럼 중간에 :을 써주고 이름을 써준느것 productId 이부분은 변수처럼 내 맘대로 정해줄수있음\n      여기서 :는 라우터돔한테 콜론뒤에 문자는 변할수있는동적값이라는걸 알려주는것(변수같은거라고 알려주는것)\n      마치 함수의 매개변수 처럼 쓰이는것 여기서는 결국 제품 번호라는 뜻 productId=제품번호 \n      products는 경로로서 활용이 되고 products/ 뒤의 주소는 상세페이지로 연결되는 값으로 사용됨 */\n    ],\n  },\n]);\n\nfunction App() {\n  return <RouterProvider router={router} />;\n}\nexport default App;\n"],"mappings":";AAAA,SAASA,mBAAmB,EAAEC,cAAc,QAAQ,kBAAkB,CAAC,CAAC;AACxE,OAAOC,QAAQ,MAAM,cAAc;AACnC,OAAOC,YAAY,MAAM,kBAAkB;AAC3C,OAAOC,UAAU,MAAM,cAAc;AACrC,OAAOC,SAAS,MAAM,eAAe;AACrC,OAAOC,iBAAiB,MAAM,uBAAuB;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,MAAM,GAAGT,mBAAmB,CAAC,CACjC;EACEU,IAAI,EAAE,GAAG;EACTC,OAAO,eAAEH,OAAA,CAACJ,UAAU;IAAAQ,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;EAAC;EACxBC,YAAY,eAAER,OAAA,CAACH,SAAS;IAAAO,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;EAC3BE,QAAQ,EAAE,CACR;IACEP,IAAI,EAAE,GAAG;IACTC,OAAO,eAAEH,OAAA,CAACN,QAAQ;MAAAU,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EACtB,CAAC,EACD;IACEL,IAAI,EAAE,WAAW;IACjBC,OAAO,eAAEH,OAAA,CAACL,YAAY;MAAAS,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAC1B,CAAC,EACD;IACEL,IAAI,EAAE,sBAAsB;IAAEC,OAAO,eAAEH,OAAA,CAACF,iBAAiB;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAC7D;EACA;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+DARM;AAUJ,CAAC,CACF,CAAC;;AAEF,SAASG,GAAGA,CAAA,EAAG;EACb,oBAAOV,OAAA,CAACP,cAAc;IAACQ,MAAM,EAAEA;EAAO;IAAAG,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AAC3C;AAACI,EAAA,GAFQD,GAAG;AAGZ,eAAeA,GAAG;AAAC,IAAAC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\REACT\\\\01-starting-setup\\\\src\\\\Components\\\\Expenses\\\\Expenses.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport ExpenseItem from \"./ExpenseItem\";\nimport ExpensesFilter from \"./ExpensesFilter\";\nimport \"./Expenses.css\";\nimport Card from \"../UI/Card\";\n\n//function Expenses (props) { //props.expenses배열을 갖게됨.\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Expenses = props => {\n  _s();\n  //필터를 출력을 담당하는 함수를 만들자\n  //이 함수를 ExpenseFilter에 props로 내려줘야 하니까 Expenses에 ExpensesFilter를 넣고\n  //props로 내려줘애겟죠\n  const [filteredYear, setFilteredYear] = useState(\"2020\");\n  const filterChangedHandler = selectedYear => {\n    // console.log('Expense.js');\n    // console.log(selectedYear);\n    setFilteredYear(selectedYear);\n    //실제로 값이 바뀐 다음에 리턴되는 데이터들이 제대로 렌더링 되는지 알아봐야겠지\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Card, {\n      className: \"expenses\",\n      children: [/*#__PURE__*/_jsxDEV(ExpensesFilter, {\n        selected: filteredYear,\n        onChangeFilter: filterChangedHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 9\n      }, this), props.items.map(expense =>\n      /*#__PURE__*/\n      //map이라는 함수 매우 중요 리액트에서 거의 반복문을 대체하듯이 사용\n      //filter 함수 중요 조건문 대신에 filter 함수 자주 사용\n      _jsxDEV(ExpenseItem, {\n        title: expense.title,\n        amount: expense.amount,\n        date: expense.date\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 5\n  }, this);\n};\n_s(Expenses, \"N/aF5O1Q1Yumn7zBaSWVzvWGO2A=\");\n_c = Expenses;\nexport default Expenses;\nvar _c;\n$RefreshReg$(_c, \"Expenses\");","map":{"version":3,"names":["React","useState","ExpenseItem","ExpensesFilter","Card","jsxDEV","_jsxDEV","Expenses","props","_s","filteredYear","setFilteredYear","filterChangedHandler","selectedYear","children","className","selected","onChangeFilter","fileName","_jsxFileName","lineNumber","columnNumber","items","map","expense","title","amount","date","_c","$RefreshReg$"],"sources":["C:/REACT/01-starting-setup/src/Components/Expenses/Expenses.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport ExpenseItem from \"./ExpenseItem\";\r\nimport ExpensesFilter from \"./ExpensesFilter\";\r\nimport \"./Expenses.css\";\r\nimport Card from \"../UI/Card\";\r\n\r\n//function Expenses (props) { //props.expenses배열을 갖게됨.\r\nconst Expenses = (props) => {\r\n  //필터를 출력을 담당하는 함수를 만들자\r\n  //이 함수를 ExpenseFilter에 props로 내려줘야 하니까 Expenses에 ExpensesFilter를 넣고\r\n  //props로 내려줘애겟죠\r\n  const [filteredYear, setFilteredYear] = useState(\"2020\");\r\n  const filterChangedHandler = (selectedYear) => {\r\n    // console.log('Expense.js');\r\n    // console.log(selectedYear);\r\n    setFilteredYear(selectedYear);\r\n    //실제로 값이 바뀐 다음에 리턴되는 데이터들이 제대로 렌더링 되는지 알아봐야겠지\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {/* 영역을 통일해야하니까 디브로 전부 묶어줌 */}\r\n      <Card className=\"expenses\">\r\n        <ExpensesFilter\r\n          selected={filteredYear}\r\n          onChangeFilter={filterChangedHandler}\r\n        />\r\n        {/* ExpensesFilter : 임포트를 안해줘서 읽고있지 못함 임포트해줌 */}\r\n        {/* 만든 함수를 실행시켜야하니까 prop을 통해서 ExpensesFilter 함수 넘겨줌\r\n        onChangeFilter라는 prop을 통해서 filterChangedHandler 함수를 전달해줌 */}\r\n        {props.items.map((expense) => (\r\n        //map이라는 함수 매우 중요 리액트에서 거의 반복문을 대체하듯이 사용\r\n        //filter 함수 중요 조건문 대신에 filter 함수 자주 사용\r\n          <ExpenseItem\r\n            title={expense.title}\r\n            amount={expense.amount}\r\n            date={expense.date}\r\n          />\r\n        ))}{\r\n        /* 밑에서 expenses[0].title 이렇게 접근해줬다고해서 이런식으로하면 안되고 \r\n            expense.title 이렇게 해줘야함 */}\r\n      </Card>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Expenses;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,WAAW,MAAM,eAAe;AACvC,OAAOC,cAAc,MAAM,kBAAkB;AAC7C,OAAO,gBAAgB;AACvB,OAAOC,IAAI,MAAM,YAAY;;AAE7B;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,QAAQ,GAAIC,KAAK,IAAK;EAAAC,EAAA;EAC1B;EACA;EACA;EACA,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGV,QAAQ,CAAC,MAAM,CAAC;EACxD,MAAMW,oBAAoB,GAAIC,YAAY,IAAK;IAC7C;IACA;IACAF,eAAe,CAACE,YAAY,CAAC;IAC7B;EACF,CAAC;;EAED,oBACEP,OAAA;IAAAQ,QAAA,eAEER,OAAA,CAACF,IAAI;MAACW,SAAS,EAAC,UAAU;MAAAD,QAAA,gBACxBR,OAAA,CAACH,cAAc;QACba,QAAQ,EAAEN,YAAa;QACvBO,cAAc,EAAEL;MAAqB;QAAAM,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACtC,CAAC,EAIDb,KAAK,CAACc,KAAK,CAACC,GAAG,CAAEC,OAAO;MAAA;MACzB;MACA;MACElB,OAAA,CAACJ,WAAW;QACVuB,KAAK,EAAED,OAAO,CAACC,KAAM;QACrBC,MAAM,EAAEF,OAAO,CAACE,MAAO;QACvBC,IAAI,EAAEH,OAAO,CAACG;MAAK;QAAAT,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACpB,CACF,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAGE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACJ,CAAC;AAEV,CAAC;AAACZ,EAAA,CArCIF,QAAQ;AAAAqB,EAAA,GAARrB,QAAQ;AAuCd,eAAeA,QAAQ;AAAC,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
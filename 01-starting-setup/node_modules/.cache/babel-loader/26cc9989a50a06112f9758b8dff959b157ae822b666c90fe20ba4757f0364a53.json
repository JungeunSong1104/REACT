{"ast":null,"code":"var _jsxFileName = \"C:\\\\REACT\\\\01-starting-setup\\\\src\\\\Components\\\\NewExpenses\\\\ExpenseForm.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport \"./ExpenseForm.css\";\n//state를 활용하면 input창의 값을 되돌려서 세팅할수있어야겠지\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ExpenseForm = props => {\n  _s();\n  const [enteredTitle, setEnteredTitle] = useState(\"\");\n  /* \r\n  useState 컴포넌트 안에서 선언\r\n  enteredTitle : 타이틀의 현재 상태를 저장하기 위한 변수 임의로 호출해주지않을거임\r\n  input태그에 값을 입력을 할때 titleChangedHandler 실행이 되면서 이벤트 값을 가지고\r\n  안의 내용을 실행할거기때문\r\n  */\n  const [enteredAmount, setEnteredAmount] = useState(\"\");\n  const [enteredDate, setEnteredDate] = useState(\"\");\n  //몇개의 스테이트가 있든 상관없이 각각의 스테이트가 관리가됨\n  //스테이트를 보면 결국엔 하나의 폼에 입력된 데이터고\n\n  /*\r\n  const [userInput, setUserInput] = useState({\r\n    //모든 스테이트를 하나로 합치자\r\n    enteredTitle: \"\",\r\n    enteredAmount: \"\",\r\n    enteredDate: \"\",\r\n  }); //useState훅이 만들어짐\r\n  */\n\n  const titleChangedHandler = event => {\n    //event라는 prop이 전달됨\n    setEnteredTitle(event.target.value);\n    //setEnteredTitle 호출\n    //인풋데이터가 변할때(인풋에 값이 입력되면) enteredTitle에 들어간 데이터가 변하게 설정\n    /*\r\n    setUserInput({\r\n      ...userInput,\r\n      enteredTitle: event.target.value,\r\n    }); //객체 형태로 저장함\r\n    */\n    //setUserInput((prevState) => {\n    /*\r\n      여기에 함수가 있으면 리액트가 알아서 호출해줌\r\n      기본 전달되는 매개변수가 하나있음\r\n      이름은 마음대로지만 보통 prevState로 작성함\r\n      전달되는 값은 같음\r\n      */\n    //return { ...prevState, enteredTitle: event.target.value };\n    /*\r\n      함수내부에는 리턴값 하나 필요\r\n      이전상태를 받아서 새로운 상태를 리턴\r\n      prevState에는 언제나 호출될 당시에 무조건 리액트가 관리하던 최신상태가 들어감\r\n      그래서 prevState 써주는게 좋음\r\n      그래도 각각 state를 \r\n      */\n    //});\n  };\n\n  const AmountChangedHandler = event => {\n    setEnteredAmount(event.target.value);\n    /* \r\n    여기에 실제로 들어가는 데이터는 문자열임\r\n    넘버로 해놨지만 문자열로 들어감 \r\n    */\n    // setUserInput({\n    //   ...userInput,\n    //   enteredAmount: event.target.value,\n    // });\n    //객체 형태로 저장함\n  };\n\n  const DateChangedHandler = event => {\n    setEnteredDate(event.target.value);\n    // setUserInput({\n    //   ...userInput,\n    //   enteredDate: event.target.value,\n    // });\n    //객체 형태로 저장함\n  };\n\n  // const inputChangedHandler = (identifier, value) => {\n  //   if (identifier === \"title\") {\n  //     setEnteredTitle(value);\n  //   } else if (identifier === \"date\") {\n  //     setEnteredTitle(value);\n  //   } else {\n  //     setEnteredTitle(value);\n  //   }\n  // };\n\n  const submitHandler = event => {\n    event.preventDefault();\n    //preventDefault : event가 가진함수, 서버리퀘스트를 막아줌?\n    const expenseData = {\n      title: enteredTitle,\n      amount: enteredAmount,\n      date: new Date(enteredDate)\n    };\n    props.onSaveExpenseData(expenseData); //모아둔 expenseData를 매개변수로 넘겨줌\n    console.log(expenseData);\n    setEnteredTitle(\"\"); //아래 jsx에서 input의 value에 값이 안들어가겠지?\n    setEnteredAmount(\"\");\n    setEnteredDate(\"\");\n  };\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: submitHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"new-expense__controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense__control\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Title\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: enteredTitle,\n          onChange: titleChangedHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense__control\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Amount\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          min: \"0.01\",\n          step: \"0.01\",\n          value: enteredAmount,\n          onChange: AmountChangedHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense__control\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Date\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"date\",\n          min: \"2019-01-10\",\n          step: \"2022-12-31\",\n          value: enteredDate,\n          onChange: DateChangedHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"new-expense__actions\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"reset\",\n        onClick: props.onCancel,\n        children: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Add Expense\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 5\n  }, this);\n};\n_s(ExpenseForm, \"cQceuCgozgRBnFcek1NBqBcFFts=\");\n_c = ExpenseForm;\nexport default ExpenseForm;\nvar _c;\n$RefreshReg$(_c, \"ExpenseForm\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","ExpenseForm","props","_s","enteredTitle","setEnteredTitle","enteredAmount","setEnteredAmount","enteredDate","setEnteredDate","titleChangedHandler","event","target","value","AmountChangedHandler","DateChangedHandler","submitHandler","preventDefault","expenseData","title","amount","date","Date","onSaveExpenseData","console","log","onSubmit","children","className","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","min","step","onClick","onCancel","_c","$RefreshReg$"],"sources":["C:/REACT/01-starting-setup/src/Components/NewExpenses/ExpenseForm.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport \"./ExpenseForm.css\";\r\n//state를 활용하면 input창의 값을 되돌려서 세팅할수있어야겠지\r\n\r\nconst ExpenseForm = (props) => {\r\n  const [enteredTitle, setEnteredTitle] = useState(\"\");\r\n  /* \r\n  useState 컴포넌트 안에서 선언\r\n  enteredTitle : 타이틀의 현재 상태를 저장하기 위한 변수 임의로 호출해주지않을거임\r\n  input태그에 값을 입력을 할때 titleChangedHandler 실행이 되면서 이벤트 값을 가지고\r\n  안의 내용을 실행할거기때문\r\n  */\r\n  const [enteredAmount, setEnteredAmount] = useState(\"\");\r\n  const [enteredDate, setEnteredDate] = useState(\"\");\r\n  //몇개의 스테이트가 있든 상관없이 각각의 스테이트가 관리가됨\r\n  //스테이트를 보면 결국엔 하나의 폼에 입력된 데이터고\r\n\r\n  /*\r\n  const [userInput, setUserInput] = useState({\r\n    //모든 스테이트를 하나로 합치자\r\n    enteredTitle: \"\",\r\n    enteredAmount: \"\",\r\n    enteredDate: \"\",\r\n  }); //useState훅이 만들어짐\r\n  */\r\n\r\n  const titleChangedHandler = (event) => {\r\n    //event라는 prop이 전달됨\r\n    setEnteredTitle(event.target.value);\r\n    //setEnteredTitle 호출\r\n    //인풋데이터가 변할때(인풋에 값이 입력되면) enteredTitle에 들어간 데이터가 변하게 설정\r\n    /*\r\n    setUserInput({\r\n      ...userInput,\r\n      enteredTitle: event.target.value,\r\n    }); //객체 형태로 저장함\r\n    */\r\n    //setUserInput((prevState) => {\r\n    /*\r\n      여기에 함수가 있으면 리액트가 알아서 호출해줌\r\n      기본 전달되는 매개변수가 하나있음\r\n      이름은 마음대로지만 보통 prevState로 작성함\r\n      전달되는 값은 같음\r\n      */\r\n    //return { ...prevState, enteredTitle: event.target.value };\r\n    /*\r\n      함수내부에는 리턴값 하나 필요\r\n      이전상태를 받아서 새로운 상태를 리턴\r\n      prevState에는 언제나 호출될 당시에 무조건 리액트가 관리하던 최신상태가 들어감\r\n      그래서 prevState 써주는게 좋음\r\n      그래도 각각 state를 \r\n      */\r\n    //});\r\n  };\r\n  const AmountChangedHandler = (event) => {\r\n    setEnteredAmount(event.target.value);\r\n    /* \r\n    여기에 실제로 들어가는 데이터는 문자열임\r\n    넘버로 해놨지만 문자열로 들어감 \r\n    */\r\n    // setUserInput({\r\n    //   ...userInput,\r\n    //   enteredAmount: event.target.value,\r\n    // });\r\n    //객체 형태로 저장함\r\n  };\r\n  const DateChangedHandler = (event) => {\r\n    setEnteredDate(event.target.value);\r\n    // setUserInput({\r\n    //   ...userInput,\r\n    //   enteredDate: event.target.value,\r\n    // });\r\n    //객체 형태로 저장함\r\n  };\r\n\r\n  // const inputChangedHandler = (identifier, value) => {\r\n  //   if (identifier === \"title\") {\r\n  //     setEnteredTitle(value);\r\n  //   } else if (identifier === \"date\") {\r\n  //     setEnteredTitle(value);\r\n  //   } else {\r\n  //     setEnteredTitle(value);\r\n  //   }\r\n  // };\r\n\r\n  const submitHandler = (event) => {\r\n    event.preventDefault();\r\n    //preventDefault : event가 가진함수, 서버리퀘스트를 막아줌?\r\n    const expenseData = {\r\n      title: enteredTitle,\r\n      amount: enteredAmount,\r\n      date: new Date(enteredDate),\r\n    };\r\n\r\n    props.onSaveExpenseData(expenseData); //모아둔 expenseData를 매개변수로 넘겨줌\r\n    console.log(expenseData);\r\n    setEnteredTitle(\"\"); //아래 jsx에서 input의 value에 값이 안들어가겠지?\r\n    setEnteredAmount(\"\");\r\n    setEnteredDate(\"\");\r\n  };\r\n\r\n \r\n  return (\r\n    <form onSubmit={submitHandler}>\r\n      {/* \r\n        form에 있는 양식 자체가 제출이 되기 때문에\r\n        버튼이 눌리면 자바스크립트에서 버튼의 영향력이 상위태그로 퍼져나감\r\n        버튼에다가 onClick을 달지 않고 form에 submit 될때 실행되게 form에 \r\n        onSubmit이벤트달아줄거임 */}\r\n      <div className=\"new-expense__controls\">\r\n        <div className=\"new-expense__control\">\r\n          <label>Title</label>\r\n          {/*<input type=\"text\" onChange={titleChangedHandler} /> */}\r\n          <input\r\n            type=\"text\"\r\n            value={enteredTitle}\r\n            onChange={titleChangedHandler}\r\n          />\r\n          {/* input은 titleChangedHandler를 실행시킴 titleChangedHandler는 인풋의 하위 모듈이라고생각할수있음\r\n            전달이 될때 titleChangedHandler */}\r\n          {/*\r\n            onChange에 inpuChangedHandler를 사용하려면\r\n            onChange는 결국 받아야 하는게 함수를 받음 {titleChangedHandler} 여기에 함수주소가 들어간다는것\r\n            여기에 함수주소를 넣으려면 함수를 만들어서 이름을 써줘도 되지만\r\n            직접적으로 익명함수를 정의해도됨\r\n            각각 titleChangedHandler AmountChangedHandler 이런식으로 함수 안만들어도되고\r\n            통합함수 만들어서 onChange에 익명함수로 직접 넣어줘도 됨\r\n          */}\r\n          {/* 중괄호안에 익명함수를 넣을수도있지만 추천하는 방법은 아님\r\n                여기서 굳이 익명함수를 쓰면 모든 디브들에 전부 익명함수를 붙여넣어야\r\n                하기때문에 함수를 따로 만들고\r\n          */}\r\n        </div>\r\n        {/* 텍스트 입력 받는 부분*/}\r\n        {/* 타이틀이 변할때, 어마운트가변할때, 데이트가 변할때 데이터를 받아서 \r\n            처리할 거기 때문에 onInput이라는 이벤트가 발생하지않음..?\r\n            on은 기본적으로 입력이 된다는 것은 입력란이 변한다는거니까 change를 쓰자\r\n        */}\r\n\r\n        <div className=\"new-expense__control\">\r\n          <label>Amount</label>\r\n          <input\r\n            type=\"number\"\r\n            min=\"0.01\"\r\n            step=\"0.01\"\r\n            value={enteredAmount}\r\n            onChange={AmountChangedHandler}\r\n          ></input>\r\n        </div>\r\n\r\n        {/* 넘버 입력 받는 부분*/}\r\n        <div className=\"new-expense__control\">\r\n          <label>Date</label>\r\n          <input\r\n            type=\"date\"\r\n            min=\"2019-01-10\"\r\n            step=\"2022-12-31\"\r\n            value={enteredDate}\r\n            onChange={DateChangedHandler}\r\n          />\r\n        </div>\r\n        {/* 넘버 입력 받는 부분 / type=\"date\" 자동으로.. 날짜설정해주나?*/}\r\n      </div>\r\n      {/* reload의 문제점 reload하면 자바스크립트의 처음부터 끝까지 돌아감?\r\n            버튼을 눌렀을 때 서버에 요청하면 안됨 아이템이 추가가 되어야하지*/}\r\n      <div className=\"new-expense__actions\">\r\n        <button type=\"reset\" onClick={props.onCancel}>Cancel</button>\r\n        {/* 클릭됐을때 뉴익스펜스에 있는 상위 컴포넌트로 올려주는 방식을 사용해야겠지\r\n        프랍을 사용해서 프랍안에 함수를 넣고 받아서 매개변수로 받아주자 \r\n        뉴익스펜스에서 함수를 하나 만들어주자 stopEditingHandler \r\n        props.onCancel 뉴익스펜스에 들어잇는 함수기 때문에 뉴익스펜스에서 실행됨 */}\r\n        <button type=\"submit\">Add Expense</button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default ExpenseForm;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
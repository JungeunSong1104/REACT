{"ast":null,"code":"var _jsxFileName = \"C:\\\\REACT\\\\01-starting-setup\\\\src\\\\Components\\\\NewExpenses\\\\ExpenseForm.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport \"./ExpenseForm.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ExpenseForm = () => {\n  _s();\n  const [enteredTitle, setEnteredTitle] = useState(\"\");\n  //useState 컴포넌트 안에서 선언\n  //enteredTitle : 타이틀의 현재 상태를 저장하기 위한 변수 임의로 호출해주지않을거임\n  //input태그에 값을 입력을 할때 titleChangedHandler 실행이 되면서 이벤트 값을 가지고\n  //안의 내용을 실행할거기때문\n  const [enteredAmount, setEnteredAmount] = useState(\"\");\n  const [enteredDate, setEnteredDate] = useState(\"\");\n  //몇개의 스테이트가 있든 상관없이 각각의 스테이트가 관리가됨\n  //스테이트를 보면 결국엔 하나의 폼에 입력된 데이터고\n\n  /*\r\n  const [userInput, setUserInput] = useState({\r\n    //모든 스테이트를 하나로 합치자\r\n    enteredTitle: \"\",\r\n    enteredAmount: \"\",\r\n    enteredDate: \"\",\r\n  }); //useState훅이 만들어짐\r\n  */\n\n  const titleChangedHandler = event => {\n    //event라는 prop이 전달됨\n    setEnteredTitle(event.target.value);\n    //setEnteredTitle 호출\n    //인풋데이터가 변할때(인풋에 값이 입력되면) enteredTitle에 들어간 데이터가 변하게 설정\n    /*\r\n    setUserInput({\r\n      ...userInput,\r\n      enteredTitle: event.target.value,\r\n    }); //객체 형태로 저장함\r\n    */\n    //setUserInput((prevState) => {\n    /*\r\n      여기에 함수가 있으면 리액트가 알아서 호출해줌\r\n      기본 전달되는 매개변수가 하나있음\r\n      이름은 마음대로지만 보통 prevState로 작성함\r\n      전달되는 값은 같음\r\n      */\n    //return { ...prevState, enteredTitle: event.target.value };\n    /*\r\n      함수내부에는 리턴값 하나 필요\r\n      이전상태를 받아서 새로운 상태를 리턴\r\n      prevState에는 언제나 호출될 당시에 무조건 리액트가 관리하던 최신상태가 들어감\r\n      그래서 prevState 써주는게 좋음\r\n      그래도 각각 state를 \r\n      */\n    //});\n  };\n\n  const AmountChangedHndler = event => {\n    setEnteredAmount(event.target.value);\n    //여기에 실제로 들어가는 데이터는 문자열임\n    //넘버로 해놨지만 문자열로 들어감\n    // setUserInput({\n    //   ...userInput,\n    //   enteredAmount: event.target.value,\n    // }); //객체 형태로 저장함\n  };\n\n  const DateChangedHndler = event => {\n    setEnteredDate(event.target.value);\n    // setUserInput({\n    //   ...userInput,\n    //   enteredDate: event.target.value,\n    // }); //객체 형태로 저장함\n  };\n\n  const inputChangedHandler = (identifier, value) => {\n    if (identifier === \"title\") {\n      setEnteredTitle(value);\n    } else if (identifier === \"date\") {\n      setEnteredTitle(value);\n    } else {\n      setEnteredTitle(value);\n    }\n  };\n  //onChange에 inpuChangedHandler를 사용하려면\n  //onChange는 결국 받아야 하는게 함수를 받음 {titleChangedHandler} 여기에 함수주소가 들어간다는것\n  //여기에 함수주소를 넣으려면 함수를 만들어서 이름을 써줘도 되지만\n  //직접적으로 익명함수를 정의해도됨\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"new-expense__controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense__control\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Title\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          onChange: event => {\n            inputChangedHandler();\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense__control\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Amount\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          min: \"0.01\",\n          step: \"0.01\",\n          onChange: AmountChangedHndler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense__control\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Date\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"date\",\n          min: \"2019-01-10\",\n          step: \"2022-12-31\",\n          onChange: DateChangedHndler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"new-expense__actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Add Expense\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this);\n};\n_s(ExpenseForm, \"cQceuCgozgRBnFcek1NBqBcFFts=\");\n_c = ExpenseForm;\nexport default ExpenseForm;\nvar _c;\n$RefreshReg$(_c, \"ExpenseForm\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","ExpenseForm","_s","enteredTitle","setEnteredTitle","enteredAmount","setEnteredAmount","enteredDate","setEnteredDate","titleChangedHandler","event","target","value","AmountChangedHndler","DateChangedHndler","inputChangedHandler","identifier","children","className","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","min","step","_c","$RefreshReg$"],"sources":["C:/REACT/01-starting-setup/src/Components/NewExpenses/ExpenseForm.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport \"./ExpenseForm.css\";\r\n\r\nconst ExpenseForm = () => {\r\n  const [enteredTitle, setEnteredTitle] = useState(\"\");\r\n  //useState 컴포넌트 안에서 선언\r\n  //enteredTitle : 타이틀의 현재 상태를 저장하기 위한 변수 임의로 호출해주지않을거임\r\n  //input태그에 값을 입력을 할때 titleChangedHandler 실행이 되면서 이벤트 값을 가지고\r\n  //안의 내용을 실행할거기때문\r\n  const [enteredAmount, setEnteredAmount] = useState(\"\");\r\n  const [enteredDate, setEnteredDate] = useState(\"\");\r\n  //몇개의 스테이트가 있든 상관없이 각각의 스테이트가 관리가됨\r\n  //스테이트를 보면 결국엔 하나의 폼에 입력된 데이터고\r\n\r\n  /*\r\n  const [userInput, setUserInput] = useState({\r\n    //모든 스테이트를 하나로 합치자\r\n    enteredTitle: \"\",\r\n    enteredAmount: \"\",\r\n    enteredDate: \"\",\r\n  }); //useState훅이 만들어짐\r\n  */\r\n\r\n  const titleChangedHandler = (event) => {\r\n    //event라는 prop이 전달됨\r\n    setEnteredTitle(event.target.value);\r\n    //setEnteredTitle 호출\r\n    //인풋데이터가 변할때(인풋에 값이 입력되면) enteredTitle에 들어간 데이터가 변하게 설정\r\n    /*\r\n    setUserInput({\r\n      ...userInput,\r\n      enteredTitle: event.target.value,\r\n    }); //객체 형태로 저장함\r\n    */\r\n    //setUserInput((prevState) => {\r\n    /*\r\n      여기에 함수가 있으면 리액트가 알아서 호출해줌\r\n      기본 전달되는 매개변수가 하나있음\r\n      이름은 마음대로지만 보통 prevState로 작성함\r\n      전달되는 값은 같음\r\n      */\r\n    //return { ...prevState, enteredTitle: event.target.value };\r\n    /*\r\n      함수내부에는 리턴값 하나 필요\r\n      이전상태를 받아서 새로운 상태를 리턴\r\n      prevState에는 언제나 호출될 당시에 무조건 리액트가 관리하던 최신상태가 들어감\r\n      그래서 prevState 써주는게 좋음\r\n      그래도 각각 state를 \r\n      */\r\n    //});\r\n  };\r\n  const AmountChangedHndler = (event) => {\r\n    setEnteredAmount(event.target.value);\r\n    //여기에 실제로 들어가는 데이터는 문자열임\r\n    //넘버로 해놨지만 문자열로 들어감\r\n    // setUserInput({\r\n    //   ...userInput,\r\n    //   enteredAmount: event.target.value,\r\n    // }); //객체 형태로 저장함\r\n  };\r\n  const DateChangedHndler = (event) => {\r\n    setEnteredDate(event.target.value);\r\n    // setUserInput({\r\n    //   ...userInput,\r\n    //   enteredDate: event.target.value,\r\n    // }); //객체 형태로 저장함\r\n  };\r\n\r\n  const inputChangedHandler = (identifier, value) => {\r\n    if (identifier === \"title\") {\r\n      setEnteredTitle(value);\r\n    } else if (identifier === \"date\") {\r\n      setEnteredTitle(value);\r\n    } else {\r\n      setEnteredTitle(value);\r\n    }\r\n  };\r\n  //onChange에 inpuChangedHandler를 사용하려면\r\n  //onChange는 결국 받아야 하는게 함수를 받음 {titleChangedHandler} 여기에 함수주소가 들어간다는것\r\n  //여기에 함수주소를 넣으려면 함수를 만들어서 이름을 써줘도 되지만\r\n  //직접적으로 익명함수를 정의해도됨\r\n\r\n  return (\r\n    <form>\r\n      <div className=\"new-expense__controls\">\r\n        <div className=\"new-expense__control\">\r\n          <label>Title</label>\r\n          {/*<input type=\"text\" onChange={titleChangedHandler} />*/}\r\n          <input\r\n            type=\"text\"\r\n            onChange={(event) => {\r\n              inputChangedHandler();\r\n            }}\r\n          />\r\n          {/* 중괄호안에 익명함수를 넣을수도있지만 추천하는 방법은 아님\r\n                여기서 굳이 익명함수를 쓰면 모든 디브들에 전부 익명함수를 붙여넣어야\r\n                하기때문에 함수를 따로 만들고*/}\r\n        </div>\r\n        {/* 텍스트 입력 받는 부분*/}\r\n        {/* 타이틀이 변할때, 어마운트가변할때, 데이트가 변할때 데이터를 받아서 \r\n            처리할 거기 때문에 onInput이라는 이벤트가 발생하지않음..?\r\n            on은 기본적으로 입력이 된다는 것은 입력란이 변한다는거니까 change를 쓰자*/}\r\n\r\n        <div className=\"new-expense__control\">\r\n          <label>Amount</label>\r\n          <input\r\n            type=\"number\"\r\n            min=\"0.01\"\r\n            step=\"0.01\"\r\n            onChange={AmountChangedHndler}\r\n          ></input>\r\n        </div>\r\n        {/* 넘버 입력 받는 부분*/}\r\n\r\n        <div className=\"new-expense__control\">\r\n          <label>Date</label>\r\n          <input\r\n            type=\"date\"\r\n            min=\"2019-01-10\"\r\n            step=\"2022-12-31\"\r\n            onChange={DateChangedHndler}\r\n          />\r\n        </div>\r\n        {/* 넘버 입력 받는 부분 / type=\"date\" 자동으로.. 날짜설정해주나?*/}\r\n      </div>\r\n\r\n      <div className=\"new-expense__actions\">\r\n        <button type=\"submit\">Add Expense</button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default ExpenseForm;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}